// Code generated by smithy-go-codegen DO NOT EDIT.


package model

import (
	"bytes"
	"context"
	"fmt"
	"github.com/aws/smithy-go/encoding/httpbinding"
	"github.com/aws/smithy-go/middleware"
	smithy "github.com/aws/smithy-go"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	smithyjson "github.com/aws/smithy-go/encoding/json"
)

type awsRestjson1_serializeOpWave struct {
}

func (*awsRestjson1_serializeOpWave) ID() string {
	return "OperationSerializer"
}

func (m *awsRestjson1_serializeOpWave) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	request, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown transport type %T", in.Request)}
	}
	
	input, ok := in.Parameters.(*WaveInput)
	_ = input
	if !ok {
		return out, metadata, &smithy.SerializationError{Err: fmt.Errorf("unknown input parameters type %T", in.Parameters)}
	}
	
	opPath, opQuery := httpbinding.SplitURI("/wave")
	request.URL.Path = smithyhttp.JoinPath(request.URL.Path, opPath)
	request.URL.RawQuery = smithyhttp.JoinRawQuery(request.URL.RawQuery, opQuery)
	request.Method = "POST"
	restEncoder, err := httpbinding.NewEncoder(request.URL.Path, request.URL.RawQuery, request.Header)
	if err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	restEncoder.SetHeader("Content-Type").String("application/json")
	
	jsonEncoder := smithyjson.NewEncoder()
	if err := awsRestjson1_serializeOpDocumentWaveInput(input, jsonEncoder.Value); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request, err = request.SetStream(bytes.NewReader(jsonEncoder.Bytes())); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	
	if request.Request, err = restEncoder.Encode(request.Request); err != nil {
		return out, metadata, &smithy.SerializationError{Err: err}
	}
	in.Request = request
	
	return next.HandleSerialize(ctx, in)
}
func awsRestjson1_serializeOpHttpBindingsWaveInput(v *WaveInput, encoder *httpbinding.Encoder) error {
	if v == nil {
		return fmt.Errorf("unsupported serialization of nil %T", v)
	}
	
	return nil
}

func awsRestjson1_serializeOpDocumentWaveInput(v *WaveInput, value smithyjson.Value) error {
	object := value.Object()
	defer object.Close()
	
	if v.Name != nil {
		ok := object.Key("name")
		ok.String(*v.Name)
	}
	
	return nil
}
